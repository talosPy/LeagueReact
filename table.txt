<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>League Table</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css">
    <style>
        body {
            padding: 20px;
        }
        table {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1>League Table</h1>
    <button id="reset-table-btn" class="btn btn-primary">Stop League Generation</button>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Club</th>
                <th>Wins</th>
                <th>Losses</th>
                <th>Draws</th>
                <th>Goals For</th>
                <th>Goals Against</th>
            </tr>
        </thead>
        <tbody id="league-table-body">
            <!-- League table rows will be inserted here by JavaScript -->
        </tbody>
    </table>

    <script>
        async function fetchLeagueTable() {
            try {
                const response = await fetch('https://leagueproject.onrender.com/matches/league/');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();
                populateTable(data);
            } catch (error) {
                console.error('There was a problem with the fetch operation:', error);
            }
        }

        function populateTable(data) {
            const tableBody = document.getElementById('league-table-body');
            tableBody.innerHTML = ''; 

            data.forEach(row => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${row.club_name}</td>
                    <td>${row.wins}</td>
                    <td>${row.losses}</td>
                    <td>${row.draws}</td>
                    <td>${row.goals_for}</td>
                    <td>${row.goals_against}</td>
                `;
                tableBody.appendChild(tr);
            });
        }

        // Register the service worker
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/service-worker.js')
                .then(registration => {
                    console.log('Service Worker registered with scope:', registration.scope);
                })
                .catch(error => {
                    console.error('Service Worker registration failed:', error);
                });
            });
        }

        
        document.addEventListener('DOMContentLoaded', fetchLeagueTable);

        
        document.getElementById('reset-table-btn').addEventListener('click', async () => {
            try {
                const response = await fetch('https://leagueproject.onrender.com/matches/reset/', { method: 'POST' });
                if (!response.ok) {
                    throw new Error('Failed to reset league table');
                }
                await fetchLeagueTable(); 
            } catch (error) {
                console.error('Error resetting league table:', error);
            }
        });
    </script>
</body>
</html>
